package cs211;
import java.awt.Color;

import processing.core.PApplet;
import processing.core.PImage;
public class ImageProcessing extends PApplet {
	PImage img;
	PImage result;
	HScrollbar thresholdBar;

	//TODO part I iv faire les deux scrollbars pour les hsb

	public void setup() { 
		size(800, 600);
		thresholdBar = new HScrollbar ( this , (float)0 ,(float) 580 , (float)800 , (float)20 ) ;
		img = loadImage("board1.jpg");
		result = createImage(width, height, RGB);
		// create a new, initially transparent, 'result' image 

		//noLoop(); // no interactive behaviour: draw() will be called only once. 
	}
	public void draw() {

		background(color(0,0,0));
		//changeImage2();
		result = convolute(img);
		image(result, 0, 0);
		thresholdBar.display();
		thresholdBar.update();

	}	
	public void changeImage () {
		result.loadPixels();
		for(int i = 0; i < img.width * img.height; i++) {
			if ( brightness(img.pixels[i]) > thresholdBar.getPos()*255) {
				result.pixels[i]= Color.black.getRGB() ;
			} else {
				result.pixels[i]= Color.white.getRGB() ;
			}

		}
		result.updatePixels();
	}

	public void changeImage2 () {
		result.loadPixels();
		for(int i = 0; i < img.width * img.height; i++) {
			if ( hue(img.pixels[i]) > 120 && hue(img.pixels[i]) < 150){
				result.pixels[i]= img.pixels[i];
			} else {
				result.pixels[i]= Color.black.getRGB() ;
			}

		}
		result.updatePixels();
	}

	public PImage convolute(PImage img) {
		float[][] kernel = {{ 0, 0, 0 },
				{ 0, 2, 0 },
				{ 0, 0, 0 }};
		float weight = 1.f;

		//grayscale image
		PImage result = createImage(img.width, img.height, ALPHA);
		int kernelSize = kernel.length;
		for (int y = 0; y < img.height; y ++){
			for (int x = 0; x < img.width; x++){
				int intensities = 0;
				for (int j = -kernelSize/2; j < kernelSize/2 + 1; j++){
					for(int i = -kernel[0].length /2; i < kernel[0].length; i++){
						if (x + i >= 0 && x + i < img.width && y + j >= 0 && y + j < img.height){
							intensities += img.get(x + i, y + j);
						}
					}
				}
				intensities /= weight;
				result.pixels[y * img.width + x] = intensities;
			}
		}
		return result;
	}

}
